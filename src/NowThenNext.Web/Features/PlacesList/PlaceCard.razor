@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="card h-100 shadow-sm">
    @if (!string.IsNullOrEmpty(Place.Image))
    {
        <div class="card-img-container" style="height: 200px; overflow: hidden;">
            @if (ImageData != null)
            {
                <img src="@ImageData" class="card-img-top" alt="@Place.Name" style="object-fit: cover; width: 100%; height: 100%;">
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center bg-light" style="height: 100%;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
        </div>
    }
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">@Place.Name</h5>
        <p class="card-text">@Place.Description</p>
        @if (!string.IsNullOrEmpty(Place.Group))
        {
            <span class="badge bg-primary mb-2">@Place.Group</span>
        }
    </div>
</div>

@code {
    
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    
    [Parameter]
    public required Place Place { get; set; }
    
    [Parameter]
    public EventCallback<Place> OnEditPlace { get; set; }
    
    [Parameter]
    public EventCallback<Place> OnDeletePlace { get; set; }
    
    private string? ImageData { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Place.Image))
        {
            var base64Image = await LocalStorage.GetItemAsStringAsync(Place.Image);
            if (!string.IsNullOrEmpty(base64Image))
            {
                ImageData = $"data:image/jpeg;base64,{base64Image}";
            }
        }
    }
}